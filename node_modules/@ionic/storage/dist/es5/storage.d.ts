/**
 * Storage is an easy way to store key/value pairs and other complicated
 * data in a way that uses a variety of storage engines underneath. Currently,
 * Storage uses localforage underneath to abstract away the various storage
 * engines while still providing a simple API.
 *
 * When running natively, Storage will prioritize using SQLite, as it's one of
 * the most stable and widely used file-based databases, and avoids some of the
 * pitfalls of things like localstorage that the OS can decide to clear out in
 * low disk-space situations.
 *
 * When running in the web or as a Progressive Web App, Storage will attempt to use
 * IndexedDB, WebSQL, and localstorage, in that order.
 */
export declare class Storage {
    _db: any;
    constructor();
    /**
     * Get the value assocated with the given key.
     * @return Promise that resolves with the value
     */
    get(key: string): Promise<any>;
    /**
     * Set the value for the given key.
     * @param key the key to identify this value
     * @param value the value for this key
     * @return Promise that resolves when the value is set
     */
    set(key: string, value: any): any;
    /**
     * Remove any value associated with this key.
     * @param key the key to identify this value
     * @return Promise that resolves when the value is removed
     */
    remove(key: string): any;
    /**
     * Clear the entire key value store. WARNING: HOT!
     * @return Promise that resolves when the kv store is cleared
     */
    clear(): any;
    /**
     * @return the number of keys stored.
     */
    length(): any;
    /**
     * @return the keys in the store.
     */
    keys(): any;
    /**
     * Iterate through each key,value pair.
     * @param iteratorCallback a callback of the form (value, key, iterationNumber)
     */
    forEach(iteratorCallback: (value: any, key: string, iterationNumber: Number) => any): any;
}

"use strict";
var config_1 = require('./util/config');
var fs_extra_1 = require('fs-extra');
var logger_1 = require('./util/logger');
function copy(context, configFile) {
    context = config_1.generateContext(context);
    configFile = config_1.getUserConfigFile(context, taskInfo, configFile);
    var logger = new logger_1.Logger('copy');
    context.successfulCopy = false;
    return copyWorker(context, configFile)
        .then(function () {
        context.successfulCopy = true;
        logger.finish();
    })
        .catch(function (err) {
        throw logger.fail(err);
    });
}
exports.copy = copy;
function copyUpdate(event, path, context) {
    logger_1.Logger.debug("copyUpdate, event: " + event + ", path: " + path);
    var configFile = config_1.getUserConfigFile(context, taskInfo, null);
    return copyWorker(context, configFile);
}
exports.copyUpdate = copyUpdate;
function copyWorker(context, configFile) {
    var copyConfig = config_1.fillConfigDefaults(configFile, taskInfo.defaultConfigFile);
    var promises = [];
    copyConfig.include.forEach(function (copyOptions) {
        promises.push(copySrcToDest(context, copyOptions.src, copyOptions.dest, copyOptions.filter));
    });
    return Promise.all(promises);
}
exports.copyWorker = copyWorker;
function copySrcToDest(context, src, dest, filter) {
    src = config_1.replacePathVars(context, src);
    dest = config_1.replacePathVars(context, dest);
    var opts = {
        filter: filter,
        clobber: false
    };
    return new Promise(function (resolve, reject) {
        fs_extra_1.copy(src, dest, opts, function (err) {
            if (err) {
                var msg = "Error copying \"" + src + "\" to \"" + dest + "\": " + err;
                if (msg.indexOf('ENOENT') < 0 && msg.indexOf('EEXIST') < 0) {
                    reject(new logger_1.BuildError("Error copying \"" + src + "\" to \"" + dest + "\": " + err));
                    return;
                }
            }
            resolve();
        });
    });
}
var taskInfo = {
    fullArgConfig: '--copy',
    shortArgConfig: '-y',
    envConfig: 'ionic_copy',
    defaultConfigFile: 'copy.config'
};

export declare class BuildError extends Error {
    hasBeenLogged: boolean;
    constructor(err?: any);
    toJson(): {
        message: string;
        name: string;
        stack: string;
        hasBeenLogged: boolean;
    };
}
export declare class Logger {
    private start;
    private scope;
    constructor(scope: string);
    ready(chalkColor?: Function): void;
    finish(chalkColor?: Function): void;
    private completed(msg, chalkColor);
    fail(err: BuildError): BuildError;
    /**
     * Does not print out a time prefix or color any text. Only prefix
     * with whitespace so the message is lined up with timestamped logs.
     */
    static log(...msg: any[]): void;
    /**
     * Prints out a dim colored timestamp prefix.
     */
    static info(...msg: any[]): void;
    /**
     * Prints out a yellow colored timestamp prefix.
     */
    static warn(...msg: any[]): void;
    /**
     * Prints out a error colored timestamp prefix.
     */
    static error(...msg: any[]): void;
    /**
     * Prints out a blue colored DEBUG prefix. Only prints out when debug mode.
     */
    static debug(...msg: any[]): void;
    static printErrorLines(errorLines: PrintLine[]): void;
    static highlightError(errorLine: string, errorCharStart: number, errorCharLength: number): string;
    static wordWrap(text: string): string[];
    static meaningfulLine(line: string): boolean;
    static jsSyntaxHighlight(text: string): string;
    static formatHeader(task: string, filename: string, rootDir: string, startLineNumber?: number, endLineNumber?: number): string;
    static newLine(): void;
    static LEFT_PADDING: string;
    static MAX_LEN: number;
}
export declare function getAppScriptsVersion(): string;
export interface PrintLine {
    lineNumber: number;
    text: string;
}

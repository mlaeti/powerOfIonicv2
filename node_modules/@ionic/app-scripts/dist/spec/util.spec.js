"use strict";
var config_1 = require('../util/config');
var config_2 = require('../util/config');
describe('util', function () {
    describe('generateContext', function () {
        it('should set isWatch true with isWatch true context', function () {
            var context = config_1.generateContext({
                isWatch: true
            });
            expect(context.isWatch).toEqual(true);
        });
        it('should set isWatch false by default', function () {
            var context = config_1.generateContext();
            expect(context.isWatch).toEqual(false);
        });
        it('should set isProd false with isProd false context', function () {
            var context = config_1.generateContext({
                isProd: false
            });
            expect(context.isProd).toEqual(false);
        });
        it('should set isProd by default', function () {
            var context = config_1.generateContext();
            expect(context.isProd).toEqual(true);
        });
        it('should create an object when passed nothing', function () {
            var context = config_1.generateContext();
            expect(context).toBeDefined();
        });
    });
    describe('getConfigValueDefaults', function () {
        it('should get arg full value', function () {
            config_2.addArgv('--full');
            config_2.addArgv('fullArgValue');
            config_2.addArgv('-s');
            config_2.addArgv('shortArgValue');
            config_2.setProcessEnvVar('npm_package_config_envVar', 'myNPMConfigVal');
            config_2.setProcessEnvVar('envVar', 'myProcessEnvVar');
            var val = config_1.getConfigValueDefault('--full', '-s', 'envVar', 'defaultValue', context);
            expect(val).toEqual('fullArgValue');
        });
        it('should get arg short value', function () {
            config_2.addArgv('-s');
            config_2.addArgv('shortArgValue');
            config_2.setProcessEnvVar('npm_package_config_envVar', 'myNPMConfigVal');
            config_2.setProcessEnvVar('envVar', 'myProcessEnvVar');
            var val = config_1.getConfigValueDefault('--full', '-s', 'envVar', 'defaultValue', context);
            expect(val).toEqual('shortArgValue');
        });
        it('should get npm config value', function () {
            config_2.setProcessEnvVar('npm_package_config_envVar', 'myNPMConfigVal');
            config_2.setProcessEnvVar('envVar', 'myProcessEnvVar');
            var val = config_1.getConfigValueDefault('--full', '-s', 'envVar', 'defaultValue', context);
            expect(val).toEqual('myNPMConfigVal');
        });
        it('should get envVar value', function () {
            config_2.setProcessEnvVar('envVar', 'myProcessEnvVar');
            var val = config_1.getConfigValueDefault('--full', '-s', 'envVar', 'defaultValue', context);
            expect(val).toEqual('myProcessEnvVar');
        });
        it('should get default value', function () {
            var val = config_1.getConfigValueDefault('--full', '-s', 'envVar', 'defaultValue', context);
            expect(val).toEqual('defaultValue');
        });
    });
    describe('getUserConfigFile', function () {
        it('should get config from npm env var', function () {
            config_2.setProcessEnv({
                npm_package_config_ionic_config: 'myconfig.js'
            });
            var userConfigFile = null;
            var context = { rootDir: './' };
            var taskInfo = { fullArgConfig: '--full', shortArgConfig: '-s', defaultConfigFile: 'default.config.js', envConfig: 'ionic_config' };
            var rtn = config_1.getUserConfigFile(context, taskInfo, userConfigFile);
            expect(rtn).toEqual('myconfig.js');
        });
        it('should get config from env var', function () {
            config_2.setProcessEnv({
                ionic_config: 'myconfig.js'
            });
            var userConfigFile = null;
            var context = { rootDir: './' };
            var taskInfo = { fullArgConfig: '--full', shortArgConfig: '-s', defaultConfigFile: 'default.config.js', envConfig: 'ionic_config' };
            var rtn = config_1.getUserConfigFile(context, taskInfo, userConfigFile);
            expect(rtn).toEqual('myconfig.js');
        });
        it('should get config from short arg', function () {
            config_2.addArgv('-s');
            config_2.addArgv('myconfig.js');
            var userConfigFile = null;
            var context = { rootDir: './' };
            var taskInfo = { fullArgConfig: '--full', shortArgConfig: '-s', defaultConfigFile: 'default.config.js', envConfig: 'ionic_config' };
            var rtn = config_1.getUserConfigFile(context, taskInfo, userConfigFile);
            expect(rtn).toEqual('myconfig.js');
        });
        it('should get config from full arg', function () {
            config_2.addArgv('--full');
            config_2.addArgv('myconfig.js');
            var userConfigFile = null;
            var context = { rootDir: './' };
            var taskInfo = { fullArgConfig: '--full', shortArgConfig: '-s', defaultConfigFile: 'default.config.js', envConfig: 'ionic_config' };
            var rtn = config_1.getUserConfigFile(context, taskInfo, userConfigFile);
            expect(rtn).toEqual('myconfig.js');
        });
        it('should get userConfigFile', function () {
            var userConfigFile = 'myconfig.js';
            var context = { rootDir: './' };
            var taskInfo = { fullArgConfig: '--full', shortArgConfig: '-s', defaultConfigFile: 'default.config.js', envConfig: 'env.config.js' };
            var rtn = config_1.getUserConfigFile(context, taskInfo, userConfigFile);
            expect(rtn).toEqual('myconfig.js');
        });
        it('should not get a user config', function () {
            var userConfigFile = null;
            var context = { rootDir: './' };
            var taskInfo = { fullArgConfig: '--full', shortArgConfig: '-s', defaultConfigFile: 'default.config.js', envConfig: 'ionic_config' };
            var rtn = config_1.getUserConfigFile(context, taskInfo, userConfigFile);
            expect(rtn).toEqual(null);
        });
    });
    var context;
    beforeEach(function () {
        config_2.setProcessArgs(['node', 'ionic-app-scripts']);
        config_2.setProcessEnv({});
        config_2.setCwd('');
        context = config_1.generateContext({});
    });
});
